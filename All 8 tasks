# -*- coding: utf-8 -*-
"""i221949.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kr28SxFHcGBuiqejiJm_l7y2KU5nDA7n

# TASK 1
dataset link : https://raw.githubusercontent.com/TirendazAcademy/PANDAS-TUTORIAL/main/DataSets/vgsalesGlobale.csv
#Exercise
Use the dataset of Game, we have explored earlier and perform following operations.

* Calculate the total global sales for all games in the dataset.
* Find the game with the highest global sales.
* Determine the average sales for each region (NA_Sales, EU_Sales, JP_Sales, Other_Sales).
* Find the top 5 most popular game genres based on global sales.
* Calculate the total sales for each genre in each region and find the most popular genre in North America (NA_Sales).
* Display last 10 rows.
* Determine the top 3 gaming platforms with the highest global sales.
* Calculate the market share (percentage of global sales) for each genre.
* Calculate the correlation coefficient between NA_Sales and EU_Sales. (.corr function)
"""

import pandas as pd
df = pd.read_csv('vgsalesGlobale.csv')
total_global_sales = df['Global_Sales'].sum()
print("Total Global Sales:", total_global_sales)

highest_sales_game = df.loc[df['Global_Sales'].idxmax()]
print("Game with Highest Global Sales:")
print(highest_sales_game)

average_sales_region = df[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].mean()
print("Average Sales per Region:")
print(average_sales_region)

top5_genres = df.groupby('Genre')['Global_Sales'].sum().nlargest(5)
print("Top 5 Popular Game Genres:")
print(top5_genres)

genre_sales_by_region = df.groupby('Genre')[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].sum()
most_popular_genre_na = genre_sales_by_region['NA_Sales'].idxmax()
print("Total Sales for Each Genre in Each Region:")
print(genre_sales_by_region)
print("Most Popular Genre in North America:", most_popular_genre_na)

print("Last 10 Rows:")
print(df.tail(10))

top3_platforms = df.groupby('Platform')['Global_Sales'].sum().nlargest(3)
print("Top 3 Gaming Platforms:")
print(top3_platforms)

genre_market_share = (df.groupby('Genre')['Global_Sales'].sum() / total_global_sales) * 100
print("Market Share for Each Genre:")
print(genre_market_share)

correlation_na_eu = df['NA_Sales'].corr(df['EU_Sales'])
print("Correlation Coefficient between NA_Sales and EU_Sales:", correlation_na_eu)

"""## Task 2 English-Spanish Dictionary
You are creating a basic English-Spanish dictionary that allows users to look up English words and find their Spanish translations.


### Tasks
* Create a dictionary where English words are keys and their Spanish translations are values.
* Ask the user to input an English word.
* Check if the word exists in the dictionary.
* If the word exists, print its Spanish translation.
* If the word does not exist, inform the user that the translation is not available.
* Implement a loop that allows the user to keep looking up words until they choose to exit.

"""

dictionary = {
    "apple": "manzana",
    "car": "coche",
    "house": "casa",
    "book": "libro",
    "computer": "computadora"
}

while True:
    word = input("Enter an English word to translate (or type 'quit' to stop): ").lower()
    if word == "quit":
        print("Thanks")
        break
    if word in dictionary:
        print(f"The Spanish translation of '{word}' is '{dictionary[word]}'.")
    else:
        print("Transaltion not available")

"""
## Task 3 Email Classification
Develope a tool which will classify an email.

### Tasks:
* Create a function classify_emails that takes a list of emails as an argument.
* Inside the function, categorize emails into "Important," "Promotions," and "Spam" based on keywords and content analysis.
* Loop through the emails and identify keywords to determine their category.
* If an email contains keywords indicating importance, assign it as "Important."
* If an email contains keywords related to promotions or deals, assign it as "Promotions."
* If an email is suspected to be spam based on certain keywords or patterns, assign it as "Spam."
* Return three lists of emails for each category.
* Print the lists."""

def classify_emails(emails):
    important= ["deadline", "presentation", "meeting"]
    promotions= ["offer", "promotion", "limited time"]
    spam = ["win a prize", "claim your"]
    impor = []
    promo = []
    spam_ = []
    for email in emails:
        email_lower = email.lower()
        if any(word in email_lower for word in important):
            impor.append(email)
        elif any(word in email_lower for word in promotions):
            promo.append(email)
        elif any(word in email_lower for word in spam):
            spam_.append(email)
        else:
            important.append(email)
    return impor, promo, spam_
emails= [
    "Project deadline is next Friday",
    "Client meeting scheduled for tomorrow",
    "Special offer on winter clothing",
    "Hurry! Claim your free gift now!"
]
important_emails, promotion_emails, spam_emails = classify_emails(emails)
print("Important Emails:", important_emails)
print("Promotions Emails:", promotion_emails)
print("Spam Emails:", spam_emails)

"""## Task 4 Online Store Shopping Cart
Write a Python program to simulate the online store's shopping cart system. The program should use a while loop to provide an interactive shopping experience.


### Tasks:
* Initialize an empty list called shopping_cart to store items.
* Display a welcome message and available products.
* Loop should be iterating over AI Response Simulator and Investment decision and keep asking for user input.
* Prompt the user to enter the number corresponding to the product they want to add to the cart.
* Check if the user entered 'q'. If so, break the loop.
* Convert the choice to an integer and validate it within the valid range (1 to 3).
* Based on the user's choice, add the selected product to the shopping_cart list.
* Display a confirmation message indicating the added product.
* Continue the loop to allow the user to add more products or proceed to checkout.
* After the loop ends, display the contents of the shopping cart.
* Display a goodbye message.
* End the program.
"""

shopping_cart = []
print("Welcome")
print("1.AI Response Simulator: $66")
print("2.Investment Decision Tool: $99")
while True:
    choice = input("Pick a product by number (or type 'q' to quit): ")
    if choice == 'q':
        break
    if choice == '1':
        shopping_cart.append("AI Response Simulator")
        print("added AI Response Simulator to your cart.")
    elif choice == '2':
        shopping_cart.append("Investment Decision Tool")
        print("added Investment Decision Tool to your cart.")
    else:
        print("Invalid option. Please choose 1, or 2")
print("These are the items in your cart:")
for item in shopping_cart:
    print(item)
print("Thanks!")

"""## Task 5
* Create two NumPy arrays of the same shape and perform element-wise addition on them.
* Calculate the element-wise product of two NumPy arrays.
"""

import numpy as np
array1 = np.array([[7, 8, 9], [7, 11, 4]])
array2 = np.array([[6, 2, 0], [4, 5, 6]])
sum = array1 + array2
product = array1*array2
print(sum)
print(" ")
print(product)

"""## Task 6
* Reshape a 1D NumPy array into a 2D array with dimensions (3, 4).

* Concatenate two NumPy arrays horizontally and vertically.
"""

one_d = np.array([9, 3, 2, 1, 8, 4, 10, 8, 2, 4, 1, 2])
reshaped_array =one_d.reshape(3, 4)
array1= np.array([[10, 20], [30, 40]])
array2= np.array([[50, 60], [70, 80]])
horizontal_concat = np.hstack((array1, array2))
vertical_concat = np.vstack((array1, array2))
print(reshaped_array)
print(" ")
print(horizontal_concat)
print(" ")
print(vertical_concat)

"""## Task 7
* Reverse A List In Python Using Slicing

"""

list_ = [6, 1, 8, 0, 5]
reversed_list = list_[::-1]
reversed_list

"""# TASK 8
You need to download the GitHub Desktop software, push your lab task to your GitHub account, and share the link on GCR as a submission.
"""
